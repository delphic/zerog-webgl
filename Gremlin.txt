Gremlin WebGL Engine
HJ - 2011
Using ogre font from http://www.network-science.de/ascii/ for headings

  /_\ (_)_ __ ___  ___ 
 //_\\| | '_ ` _ \/ __|
/  _  \ | | | | | \__ \
\_/ \_/_|_| |_| |_|___/

* 3D Rendering Engine
	* Basic World Translate, Rotate, Scale abilities
	* Scalable Debug shapes (and colour specified!)
		* Wireframes and solids of Cubeboids, Rays, Rectangles, Spheres, Cylinders, Circles
	* Texture Management
		(* Texture Filter Configuration Options)
		* Transparency (need to z order, copying Stranded method for this might be a good idea)
		* Render To Texture
	* Sprites (dependant on transparency)
	* Per pixel lighting system
		* Ambient
		* Directional
		* Point Lights
		* Specular Lighting
		* Phase 2: Spot lights
		* Specular Maps
		* Phase 2: Shadow Maps
	* Height Map Terrian Rendering
* Camera Model - basic setting of rotation
	* Sub Camera Objects - FPS, Third Person, Space Camera etc.
* JSON static model loading
	* Phase 2: In engine JSON model creation
	* Phase 3: JSON Animated Models.
* Level Loading from file - setting lighting, models, etc
	* Phase 2: In engine level creation
* Keyboard and Mouse Input
	* Bindable Keys
* Full screen options
* HTML GUI overlays
	* Need to investigate ability to load JQuery event binds after creating inputs - if we plan to use JQuery, try this with normal JS first.
	* GUIs stored in separate files
* Maths library
	* Use existing libraries where possible, make sure it contains planes and ray maths
* Physics
	* Collision Detection
		* Bounding Spheres
			- Bounding Ellipsoid ( only really needed for games with 'shields' 
		* Bounding Boxes
			- Sub levels for locational damage
	* Basic Gravity (both directional and point)
* Scene Management 
	* Frustrum Culling
* Sound
	* BG Music
	* Triggered Sound Effects
	* Phase 2: Directional sound
* Logging - log errors

* Phase 2: AI framework

   ___           _           _       ___ _             
  / _ \_ __ ___ (_) ___  ___| |_    / _ \ | __ _ _ __  
 / /_)/ '__/ _ \| |/ _ \/ __| __|  / /_)/ |/ _` | '_ \ 
/ ___/| | | (_) | |  __/ (__| |_  / ___/| | (_| | | | |
\/    |_|  \___// |\___|\___|\__| \/    |_|\__,_|_| |_|
              |__/                                    

Preparation Work:
Used WAMP to set up a local server. (Chrome doesn't allow you to make HTTP requests when viewing a file locally)
Set up Mercurial as a version control system.

v0.1
* Inline Shaders
* Inline Game Script
	* Basic Game Loop - add reset timer if large time between updates
	* Temporary Camera Movement System via WASD + mouse look by mouse pos being close to the edges of the canvas
* External Engine Script
	* Basic Render Obj at Position
	* Basic Camera
	* Static Debug Shapes
		Cubes, Spheres and Pyramids
	
Using LearningWebGL lesson 4 as a basis, stole the moon from Lesson 11 though!

v0.2
* Fix input not working for not fullscreen - (need to set width)
* Fix Cursor Issues - override default action (also invisible cursor)
* MultiShader Programs and Multiple Shader Scripts
* Basic Textures
* Game Object Manager
* Convert from Debug Shapes to primitives
[* Add Menu Overlay - Meh this can wait until I have something for it to do]

v0.3
* Texture Filters (Global Setting)
* Per Vertex Lighting Shaders
	* Add Normals to Primitives
	* Add uniforms for ambient and single directional light
	* Add useLighting to objects / fullBright
	* Think about how to do multiple lights (passing an array of uniforms to the shader perhaps?)
* External Shader Scripts (maybe)

v0.4 
* Point Lights - unskew from camera - need coordinate transform functions for rotation (directional light) and position (point lights & presumably spot lights).
* Spot Lights
* Light Manager
	* Remove Color Shaders and add functionality to current shader
* Per Pixel Lighting Shaders
* Loading Objects from Files

v0.5
* Implement Scaling
* Specular Lighting (Still todo separate colours)
* Loading 'levels' from Files

v0.6 
* Separte CSS Width and resolution of canvas
* Game Layer - Menu system, loading system, options (texture filtering, lighting, pixel / vertex, resolution).

v0.7
* Convert from Yaw Pitch Roll Camera, to Look At, Position, Up Camera (need conversion from at,up,pos to rotation matrix)
* Material System?
* Render to Texture
* Alpha Blending
* Specular Maps

THEN onto GUI & HUD (using HTML), sound and input controls (separate files perhaps)